[{"content":"","permalink":"https://www.sulvblog.cn/posts/blog/blog/","summary":"","title":"Blog"},{"content":"","permalink":"https://www.sulvblog.cn/posts/life/life/","summary":"","title":"Life"},{"content":"","permalink":"https://www.sulvblog.cn/posts/read/read/","summary":"","title":"Read"},{"content":"","permalink":"https://www.sulvblog.cn/posts/tech/tech/","summary":"","title":"Tech"},{"content":" Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群 787018782\n","permalink":"https://www.sulvblog.cn/links/","summary":"Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 👉Hugo博客交流群 787018782","title":"🤝友链"},{"content":"关于我\n英文名: Kevin Xu 职业: 程序员 运动: 跑步、乒乓球、爬山 ","permalink":"https://www.sulvblog.cn/about/","summary":"关于我 英文名: Kevin Xu 职业: 程序员 运动: 跑步、乒乓球、爬山","title":"🙋🏻‍♂️关于"},{"content":" OS:Ubuntu: 16.04 / 18.04\nOpencCV: 4.2\nCuda: 8.0 / 9.0\nNivida Driver: 418.56 (GTX 1050ti) / 435 (GTX 1060)\nCPU: i3-8300 3.70Ghz\nffmpeg: 4.2 / 4.2.4\nnv_codec_headers: 8.2 / 9.0\nInstall Nvidia Driver list available Nvidia Driver\nubuntu-drivers devices add repoitory\nsudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update instll Nvidia Driver\nsudo apt install nvidia-xxx Install CUDA Check CUDA and Nvidia driver compatibility https://docs.nvidia.com/deploy/cuda-compatibility/index.html\nDownload Cuda runfile which determines by your os https://developer.nvidia.com/cuda-downloads\nplease choose not to install nvidia graphics driver, or the driver will be updated**\ninstall cuda (ex: cuda 8.0 for ubuntnu 16.04 )\nsudo sh cuda_8.0.61_375.26_linux.run Add environment variables to ~/.bashrc\nsudo nano ~/.bashrc export PATH=/usr/local/cuda/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc Install NV_codec (optional for gpu ) download nv_codec_headers 8.2: https://github.com/FFmpeg/nv-codec-headers/tree/sdk/8.2\ninstall nv_codec_headers 8.2\nsudo make install nv_codec_headers 9.0需要cuda 9.0以上\nInstall FFmpeg 4.2.4 install necessary tool\nsudo apt-get update -qq \u0026amp;\u0026amp; sudo apt-get -y install \\ autoconf \\ automake \\ build-essential \\ cmake \\ git-core \\ libass-dev \\ libfreetype6-dev \\ libgnutls28-dev \\ libsdl2-dev \\ libtool \\ libva-dev \\ libvdpau-dev \\ libvorbis-dev \\ libxcb1-dev \\ libxcb-shm0-dev \\ libxcb-xfixes0-dev \\ pkg-config \\ texinfo \\ wget \\ yasm \\ zlib1g-dev install libx264:\ngit clone https://code.videolan.org/videolan/x264.git cd x264 sudo ./configure --enable-shared --disable-asm sudo make \u0026amp;\u0026amp; sudo make install installl ffplay\nsudo apt-get install libsdl2-dev install libfdk_aac (optional)\nhttps://sourceforge.net/projects/opencore-amr/files/fdk-aac/\n./configure make \u0026amp;\u0026amp; sudo make install vi /etc/ld/so.conf.d/aac.conf /usr/local/lib sudo ldconfig install mp3lame (optional)\nsudo apt-get install yasm libmp3lame-dev download ffmpeg:\ngit clone https://git.ffmpeg.org/ffmpeg.git configure command (if you need cuvid)\nsudo ./configure --enable-libmp3lame --enable-libfdk_aac --enable-libx264 --enable-gpl --enable-cuda --enable-cuvid --enable-nvenc --enable-nonfree --enable-pic --enable-rpath --enable-shared --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64 --enable-libnpp --enable-ffplay configure command (if you don\u0026rsquo;t need cuvid and sound but want cuda )\nsudo ./configure --enable-libx264 --enable-gpl --enable-cuda --enable-nvenc --enable-nonfree --enable-rpath --enable-pic --enable-shared --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64 --enable-ffplay compile ffmpeg\nsudo make \u0026amp;\u0026amp; sudo make install add to envirnment\nsudo vi ~/.bashrc export PATH=/usr/local/bin:$PATH source ~/.bashrc sudo nano /etc/ld.so.conf # dertermine on your ffmpeg install location /usr/local/ffmpeg/lib sudo ldconfig for more build options https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu\nTest ffmpeg Hardware acceleration methods:\nffmpeg -hwaccels cpu:\ntime ffmpeg -rtsp_transport tcp -i rtsp://admin:ai123456@192.168.0.111 -r 30 -t 100 -c:v h264 -b:v 2048k -vf scale=1280:-1 -y -c:v libx264 tcp_cpu_output.mp4 gpu:\ntime ffmpeg -rtsp_transport tcp -hwaccel cuvid -c:v h264_cuvid -i rtsp://admin:ai123456@192.168.0.111 -r 30 -t 100 -b:v 2048k -vf scale_npp=1280:-1 -y -c:v h264_nvenc tcp_gpu_output.mp4 默認下ffmpeg抓rtsp使用UDP,這會lose大量packet，使用TCP避免。\nVideo.mp4 CPU GPU Real Time 16s 0.5s Bit rate 1497kbps 1479kbps rtsp://admin:ai123456@192.168.0.111 (30幀) CPU GPU Real Time 1m49s 1m41s Bit rate 1911kbps 2067kbps Install Opencv install required and optional package\nsudo add-apt-repository -y \u0026#34;deb http://security.ubuntu.com/ubuntu xenial-security main\u0026#34; sudo apt-get install -y libjpeg8-dev libjasper-dev libpng12-dev sudo apt install build-essential cmake git pkg-config libgtk-3-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev sudo apt install libjpeg-dev libpng-dev libtiff-dev gfortran openexr libatlas-base-dev python3-dev python3-numpy libtbb2 libtbb-dev libdc1394-22-dev download opencv 4.2 and extra library\nmkdir opencv_base cd opencv_base git clone https://github.com/opencv/opencv.git --branch=4.2.0 git clone https://github.com/opencv/opencv_contrib.git --branch=4.2.0\tcd opencv_base/opencv/ mkdir build cd build with cuda and opencv_world check your cuda_arch_bin:https://developer.nvidia.com/cuda-gpus\nsudo cmake -D CMAKE_BUILD_TYPE=Release \\ -D OPENCV_GENERATE_PKGCONFIG=YES \\ -D CMAKE_INSTALL_PREFIX=/usr/local \\ -D BUILD_JAVA=YES \\ -D WITH_CUDA=ON \\ -D BUILD_opencv_world=ON \\ -D WITH_FFMPEG=ON \\ -D OPENCV_GENERATE_PKGCONFIG=ON \\ -D OPENCV_EXTRA_MODULES_PATH=/usr/local/opencv_base/opencv_contrib/modules \\ -D BUILD_opencv_python3=yes \\ -D CUDA_ARCH_BIN=6.1 .. without cuda (Simple) sudo cmake -D CMAKE_BUILD_TYPE=RELEASE \\ -D OPENCV_GENERATE_PKGCONFIG=YES \\ -D CMAKE_INSTALL_PREFIX=/usr/local \\ -D BUILD_JAVA=YES \\ -D BUILD_opencv_world=ON \\ -D WITH_FFMPEG=ON \\ -D INSTALL_C_EXAMPLES=ON \\ -D INSTALL_PYTHON_EXAMPLES=ON \\ -D OPENCV_GENERATE_PKGCONFIG=ON \\ -D OPENCV_EXTRA_MODULES_PATH=/usr/local/opencv_base/opencv_contrib/modules \\ -D BUILD_EXAMPLES=ON .. Compile cuda \u0026amp;\u0026amp; ffmpeg with Opencv 開發指令 include及lib都為相對路徑 (if you want to pack code )\nTwo .so files need to be at system location libx264.so\nsudo cp lib/libx264.so.160 /lib/x86_64-linux-gnu/ libswresample.so\nsudo cp lib/libswresample.so.3 /usr/local/lib/ CUDA compiles to shared file (.so): (NV12toBGR) nvcc -shared cuda_convert.cu -o ../lib/libcuda_convert.so --compiler-options \u0026#39;-fPIC\u0026#39; FFmpeg gpu server compiles to shared file (.so) g++ -shared -fPIC ffmpeg_gpu_server.cpp -o ../lib/libffmpeg_gpu_server.so -I../include/ -L ../lib -Wl,--rpath=\u0026#39;../lib\u0026#39; -lavformat -lavcodec -lavutil -lswscale -lswresample -lcuda_convert -lx264 FFmpeg gpu client compiles g++ ffmpeg_gpu_client.cpp -o ../bin/ffmpeg_gpu_client -I../include/ -Wl,--rpath=\u0026#39;../lib\u0026#39; -L -lffmpeg_gpu_server -lopencv_world -ldl -lm -lz -lX11 -std=gnu++11 ","permalink":"https://www.sulvblog.cn/posts/ffmpeg_note_1/","summary":"OS:Ubuntu: 16.04 / 18.04 OpencCV: 4.2 Cuda: 8.0 / 9.0 Nivida Driver: 418.56 (GTX 1050ti) / 435 (GTX 1060) CPU: i3-8300 3.70Ghz ffmpeg: 4.2 / 4.2.4 nv_codec_headers: 8.2 / 9.0 Install Nvidia Driver list available Nvidia Driver ubuntu-drivers devices add repoitory sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update instll Nvidia Driver sudo apt install nvidia-xxx Install CUDA Check CUDA and Nvidia driver compatibility https://docs.nvidia.com/deploy/cuda-compatibility/index.html Download Cuda runfile which determines by your os https://developer.nvidia.com/cuda-downloads please choose not to install nvidia graphics driver, or the driver will be updated** install cuda (ex: cuda 8.0 for ubuntnu 16.04 ) sudo sh cuda_8.0.61_375.26_linux.run Add environment variables to ~/.bashrc sudo nano ~/.bashrc export PATH=/usr/local/cuda/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc Install NV_codec (optional for gpu ) download nv_codec_headers 8.2: https://github.com/FFmpeg/nv-codec-headers/tree/sdk/8.2 install nv_codec_headers 8.2 sudo make install nv_codec_headers 9.0需要cuda 9.","title":"(影音處理) FFmpeg開發系列1 - FFmpeg、OpenCV、CUDA、NV_Codec GPU加速環境搭建"}]