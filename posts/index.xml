<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>📚 Posts on Jonathan&#39;s Blog</title>
    <link>https://jonathan-tw.github.io/posts/</link>
    <description>Recent content in 📚 Posts on Jonathan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 13 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jonathan-tw.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>(2017 NOSSDAV Paper) Not so QUIC A Performance Study of DASH over QUIC</title>
      <link>https://jonathan-tw.github.io/posts/2017-nossdav-paper-not-so-quic-a-performance-study-of-dash-over-quic/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jonathan-tw.github.io/posts/2017-nossdav-paper-not-so-quic-a-performance-study-of-dash-over-quic/</guid>
      <description>Summary QUIC不及TCP在DASH的表現，由於大多數ABR algorighm都經過優化與TCP配合使用，因此沒有充分利用QUIC提供的功能。 Problem statement What is the impact of QUIC on QoE? How should adaptive bitrate streaming be built to leverage the benefits provided by QUIC? Research objectives A Performance Study and future work Methods we studied QoE performance of different DASH quality adaptation algorithms that are either solely based on the playout buffer filling, or on the video segment download rate, or on both. DASH quality adaptation algorithms that are mainly categorized as</description>
    </item>
    
    <item>
      <title>(2020 IEEE Paper) Does QUIC Suit Well With Modern Adaptive Bitrate Streaming Techniques?</title>
      <link>https://jonathan-tw.github.io/posts/2020-ieee-paper-does-quic-suit-well-with-modern-adaptive-bitrate-streaming-techniques/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jonathan-tw.github.io/posts/2020-ieee-paper-does-quic-suit-well-with-modern-adaptive-bitrate-streaming-techniques/</guid>
      <description>Summary 在QUIC中，速度快的video stream被比較慢的audio stream給queue住(sharing a single UDP socket buffer)，造成audio request response latency拉長。其上層的DASH計算throughput不考慮response latency，造成實際的throughput跟</description>
    </item>
    
    <item>
      <title>2023 軟韌新鮮人 面試時程</title>
      <link>https://jonathan-tw.github.io/posts/2023-%E8%BB%9F%E9%9F%8C%E6%96%B0%E9%AE%AE%E4%BA%BA-%E9%9D%A2%E8%A9%A6%E6%99%82%E7%A8%8B/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jonathan-tw.github.io/posts/2023-%E8%BB%9F%E9%9F%8C%E6%96%B0%E9%AE%AE%E4%BA%BA-%E9%9D%A2%E8%A9%A6%E6%99%82%E7%A8%8B/</guid>
      <description>Ref 代碼隨想錄 TSMC &amp;amp; IC Design House(M,R,P)考古 Leetcode Blind 75 CodeTop Leetcode C++ Solutions Behavior questions 為什麼想來我們公司？ 你在xx有什麼特別的貢獻？ (xx = 實習公司) 在你過去工作經驗或求學過程中，你認為最大的困難/挑戰是?為什麼？ 在你過去工作經驗或求學過程中，你認為最大的成就/果是?為什麼？ 你人生遇到最挫折的事情？你怎</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 面試題</title>
      <link>https://jonathan-tw.github.io/posts/c_c&#43;&#43;-%E9%9D%A2%E8%A9%A6%E7%A7%98%E7%AC%88/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jonathan-tw.github.io/posts/c_c&#43;&#43;-%E9%9D%A2%E8%A9%A6%E7%A7%98%E7%AC%88/</guid>
      <description>CH1 - 基礎 1.1 1 2 int x, y z; y = z = 4 // y = 4 and z= 4 1.2 &amp;amp; 運算 =&amp;gt; 做二進位and運算 | 運算 =&amp;gt; 做二進位or運算 &amp;amp;&amp;amp; 和 || 皆為判斷式 =&amp;gt; 回傳1或者是0 1.3 1 x = (y == z) ? 4 : 5; y =4, z = 2, (問號前面的判斷式) false, x取後者, x = 5 if (true) ? x = 4 if (false) ? x = 5 1.4 1 ::value = 2; 在C中無法編譯通過，C++可。(改變全局變數值</description>
    </item>
    
    <item>
      <title>(課程筆記)(CTU in Prague) Middleware architectures 2 Review</title>
      <link>https://jonathan-tw.github.io/posts/middleware-architectures-2-review/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jonathan-tw.github.io/posts/middleware-architectures-2-review/</guid>
      <description>Lecture 2 - Asynchronous I/O Programming Models Concurrency (Asynchronous I/O = cooperative multitasking) Multiple tasks have the ability to run in an overlapping manner Concurrency does not imply parallelism! Multiprocessing CPU-bounded tasks Multithreading I/O bound tasks It uses preemtive multitasking Promise object: an async object that be returned by the async function. An object representing completion or failure of an asynchronous operation. Await function: makes program to wait until the promise is resolved or rejected can only be usded inside async function Lecture 3 - Cloud Architectures Cloud Computing Concepts On-demand and self-service (當需要資源時才被提供,自動化) Resources are provisioned as they are requested and when they are required ‒ No human interaction, automatic No human interaction, automatic Board network access (資源可被網路</description>
    </item>
    
    <item>
      <title>(課程筆記)(CTU in Prague) Middleware architectures 2 HW</title>
      <link>https://jonathan-tw.github.io/posts/middleware-architectures-2-hw/</link>
      <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jonathan-tw.github.io/posts/middleware-architectures-2-hw/</guid>
      <description>AJAX / XHR states / CORS / Data access Tasks Create a simple HTML page with an info text field and a single button Implement a JavaScript function which is triggered when the button is clicked The function should fetch relatively large file (e.g. 100-200MB) in the text field show following states: loading - when the open method was called loaded - when the send method was called downloading - while the data is being downloaded finished downloading - when the data has beeen downloaded you can use Promise, async/await Description AJAX overview: Asynchronous JavaScript and XML technique for creating better, faster, and more interactive web applications relies on XML, JSON, HTML, CSS and JavaScript AJAX is not a programming language Running this demo by using the jquery module to achieve the ajax request. Following the xhr state in https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState.</description>
    </item>
    
    <item>
      <title>FFmpeg開發系列1 - FFmpeg、OpenCV、CUDA、NV_Codec GPU加速環境搭建</title>
      <link>https://jonathan-tw.github.io/posts/ffmpeg_note_1/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jonathan-tw.github.io/posts/ffmpeg_note_1/</guid>
      <description>OS:Ubuntu: 16.04 / 18.04 OpencCV: 4.2 Cuda: 8.0 / 9.0 Nivida Driver: 418.56 (GTX 1050ti) / 435 (GTX 1060) CPU: i3-8300 3.70Ghz ffmpeg: 4.2 / 4.2.4 nv_codec_headers: 8.2 / 9.0 Install Nvidia Driver list available Nvidia Driver 1 ubuntu-drivers devices add repoitory 1 2 sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update instll Nvidia Driver 1 sudo apt install nvidia-xxx Install CUDA Check CUDA and Nvidia driver compatibility https://docs.nvidia.com/deploy/cuda-compatibility/index.html Download Cuda runfile which determines by your os https://developer.nvidia.com/cuda-downloads please choose not to install nvidia graphics driver, or the driver will be updated** install cuda (ex: cuda 8.0 for ubuntnu 16.04 ) 1 sudo sh cuda_8.0.61_375.26_linux.run Add environment variables to ~/.bashrc 1 2 3 4 sudo nano ~/.bashrc export PATH=/usr/local/cuda/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc Install NV_codec (optional for gpu ) download nv_codec_headers 8.2: https://github.com/FFmpeg/nv-codec-headers/tree/sdk/8.2 install nv_codec_headers 8.2 1 sudo make install nv_codec_headers 9</description>
    </item>
    
  </channel>
</rss>
